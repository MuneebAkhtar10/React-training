{"ast":null,"code":"var _jsxFileName = \"/home/dev/Desktop/react-firebase/src/components/dashboard/Dashboard.js\";\n// import React ,{Component} from 'react'\nimport Notifications from './Notifications';\nimport ProjectList from '../projects/ProjectList';\nimport ProjectIndex from '../layout/ProjectIndex';\nimport { connect } from 'react-redux'; //for data ldisplay from db\n\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport axios from 'axios'; // import Project from './Project'\n\nimport React, { Component, useState, useEffect, Fragment } from 'react';\n\nconst Dashboard = () => {\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    axios.get('http://localhost:3000/api/v1/projects.json').then(resp => {\n      setProjects(resp.data.data);\n    }).catch(resp => console.log(resp));\n  }, [projects.length]); // class Dashboard extends Component{\n  //     //getting projects from store and passing as prop in PROJECTLIST\n  //     constructor(props){\n  //         super(props)\n  //         this.state={\n  //         project_modules:[\n  //         ]\n  //         }\n  //     }\n  //     componentDidMount(){\n  //      axios.get('http://localhost:3000/api/v1/projects.json')\n  //      .then(data => {\n  //         debugger\n  //        let res=[]\n  //        data.data.data.map((data) =>{\n  //          res.push({id: data.id , title: data.title, body: data.body, user_id: data.user_id})\n  //          this.setState({project_modules: res})\n  //        })\n  //      })\n  //      .catch(data => {\n  //         debugger\n  //     })\n  // }\n\n  const list = projects.map(item => {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: item.attributes.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, item.attributes.body);\n  }); // const {projects} = this.props;\n  // render(){\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"hello\"))) // <div className=\"dashboard container\">\n  //     <div className=\"row\">\n  //         <div className=\"col s12 m6\">\n  //             <h5>All Projects</h5>\n  //         {/* <ProjectIndex project_modules={this.state.project_modules}/>  */}\n  //             {/* <ProjectList projects={projects}/> */}\n  //         </div>\n  //         <div className=\"col s12 m5 offset-m1\">\n  //             {/* <Notifications /> */}\n  //         </div>\n  //     </div>\n  // </div>\n  ;\n}; // const mapStateToProps = (state)=>{\n//     console.log(state);\n//     return{\n//         // This is the dummy data fetcher line.project is from rootReducer and projects from projectReducer\n//         // projects: state.project.projects\n//         projects: state.firestore.ordered.projects\n//     }\n// }\n// //passing function in connect and firestoreConnect will fetch data from db\n// export default compose(\n//     connect(mapStateToProps),\n//     firestoreConnect([\n//         {collection: 'projects'}\n//     ])\n// )(Dashboard)\n\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/dev/Desktop/react-firebase/src/components/dashboard/Dashboard.js"],"names":["Notifications","ProjectList","ProjectIndex","connect","firestoreConnect","compose","axios","React","Component","useState","useEffect","Fragment","Dashboard","projects","setProjects","get","then","resp","data","catch","console","log","length","list","map","item","attributes","title","body"],"mappings":";AAAA;AACA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CACA;;AACA,SAAQC,gBAAR,QAA+B,sBAA/B;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,OAAOC,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,EAAiCC,SAAjC,EAA2CC,QAA3C,QAA0D,OAA1D;;AAGA,MAAMC,SAAS,GAAG,MAAK;AAEnB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACAC,EAAAA,SAAS,CAAC,MAAK;AAEXJ,IAAAA,KAAK,CAACS,GAAN,CAAU,4CAAV,EACCC,IADD,CACOC,IAAI,IAAI;AAACH,MAAAA,WAAW,CAACG,IAAI,CAACC,IAAL,CAAUA,IAAX,CAAX;AACf,KAFD,EAGCC,KAHD,CAGOF,IAAI,IAAGG,OAAO,CAACC,GAAR,CAAYJ,IAAZ,CAHd;AAKH,GAPQ,EAON,CAACJ,QAAQ,CAACS,MAAV,CAPM,CAAT,CAHmB,CAcvB;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMC,IAAI,GAAGV,QAAQ,CAACW,GAAT,CAAaC,IAAI,IAAI;AAElC,wBAAQ;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,UAAL,CAAgBC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCF,IAAI,CAACC,UAAL,CAAgBE,IAAjD,CAAR;AACC,GAHY,CAAb,CAzCuB,CA+Cf;AACA;;AACJ,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,CADJ,CADJ,CAMI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBJ;AAoBH,CArED,C,CAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAehB,SAAf","sourcesContent":["// import React ,{Component} from 'react'\nimport Notifications from './Notifications'\nimport ProjectList from '../projects/ProjectList'\nimport ProjectIndex from '../layout/ProjectIndex'\nimport {connect} from 'react-redux'\n//for data ldisplay from db\nimport {firestoreConnect} from 'react-redux-firebase'\nimport {compose} from 'redux'\nimport axios from 'axios'\n// import Project from './Project'\n\nimport React,{Component,useState,useEffect,Fragment} from 'react'\n\n\nconst Dashboard = () =>{\n\n    const [projects, setProjects]=useState([])\n    useEffect(() =>{\n        \n        axios.get('http://localhost:3000/api/v1/projects.json')\n        .then( resp => {setProjects(resp.data.data)\n        })\n        .catch(resp =>console.log(resp))\n\n    }, [projects.length])\n\n\n\n// class Dashboard extends Component{\n//     //getting projects from store and passing as prop in PROJECTLIST\n//     constructor(props){\n//         super(props)\n\n//         this.state={\n\n//         project_modules:[\n//         ]\n//         }\n//     }\n//     componentDidMount(){\n//      axios.get('http://localhost:3000/api/v1/projects.json')\n//      .then(data => {\n//         debugger\n//        let res=[]\n//        data.data.data.map((data) =>{\n\n//          res.push({id: data.id , title: data.title, body: data.body, user_id: data.user_id})\n//          this.setState({project_modules: res})\n\n//        })\n//      })\n//      .catch(data => {\n//         debugger\n//     })\n// }\nconst list = projects.map(item => {\n\nreturn (<li key={item.attributes.title}>{item.attributes.body}</li>)\n})\n\n\n        // const {projects} = this.props;\n        // render(){\n    return(\n        <Fragment>\n            <div>\n                <p>hello</p>\n            </div>\n         </Fragment>\n        // <div className=\"dashboard container\">\n        //     <div className=\"row\">\n        //         <div className=\"col s12 m6\">\n        //             <h5>All Projects</h5>\n        //         {/* <ProjectIndex project_modules={this.state.project_modules}/>  */}\n        //             {/* <ProjectList projects={projects}/> */}\n        //         </div>\n        //         <div className=\"col s12 m5 offset-m1\">\n        //             {/* <Notifications /> */}\n        //         </div>\n        //     </div>\n        // </div>\n    )\n    \n}\n\n// const mapStateToProps = (state)=>{\n//     console.log(state);\n//     return{\n//         // This is the dummy data fetcher line.project is from rootReducer and projects from projectReducer\n//         // projects: state.project.projects\n//         projects: state.firestore.ordered.projects\n//     }\n// }\n// //passing function in connect and firestoreConnect will fetch data from db\n// export default compose(\n//     connect(mapStateToProps),\n//     firestoreConnect([\n//         {collection: 'projects'}\n//     ])\n// )(Dashboard)\nexport default Dashboard"]},"metadata":{},"sourceType":"module"}